# Customized_Attended_Framework_extension_v1_and_Activity_package
  
[勝又自作Attended_Framework_拡張v1] (C) 2022 Takahiro Katsumata  
　このコンポーネントはフリーソフトですので自由にご利用ください。  
　（このコンポーネントを商用利用，業務利用する際はご一報ください）  
　著作権は作者が保有しており，作者の個人活動によって作成されたものです。  
　UiPath社公開"Attended Framework v1.2"をカスタマイズし機能拡張したFrameworkとアクティビティパッケージです。  
  
  
■概要，特徴  
主な機能：  
・設定情報一括取得機能，およびパス情報取得時の環境依存解消機能  
・ログ出力実装補助，ログ＆テキストの同時出力機能  
・各種のFrameworkオプション機能  
　　※資格情報一括取得，アウトプット毎フォルダ(YMDhmsフォルダ)自動生成，終了時実行結果メール自動送信，等々  
・[勝又自作アクティビティパック]　※数値toLetter変換，等々  
・[勝又自作ワークフローパーツ]　※営業日取得.xaml，クリックDL結果ファイル格納.xaml 等々  
  
※詳細情報は "説明書トップ.txt" から辿ってください。



■前提

　◆このFrameworkは [勝又自作アクティビティパック]に依存します。

　◆FrameworkのUiPathプロジェクトは，そのままロボットプロセスのテスト実行ができるように初期設定されています。

　◆【サンプルＵＯＣ挙動】　※デフォルトで以下の挙動となるように設定しています。適宜，設定変更とＵＯＣ実装を行ってください。

　　　1. InitialProcess.xaml
　　　　　1.1 フォルダ "YYYYMMDDhhmmss"（プロセス実行毎アウトプットフォルダ）を作成。 　　　　　　　（Frameworkオプション機能）
　　　　　1.2 フォルダ "YYYYMMDDhhmmss" にStartタイムスタンプファイルを作成。 　　　　　　　　　　　（Frameworkオプション機能）

　　　2. MainProcess.xaml
　　　　　2.1 "Parameters.xlsx" の読み込み。　　　　　　　　　　　　　　　　　　　　　　　　　　　　（ＵＯＣ）
　　　　　2.1 "サンプルUOCワークフロー.xaml"を実行　　　　　　　　　　　　　　　　　　　　　　　　　（ＵＯＣ）
　　　　　　　2.1.1 "Parameters.xlsx"から読み込んだ文字列 "Hello World!" の
　　　　　　　　　　メッセージボックス出力を繰り返す。　　　　　　　　　　　　　　　　　　　　　　　（ＵＯＣ）

　　　3. EndProcess.xaml
　　　　　3.1 先行 "MainProcess.xaml" の成功時に，メール添付ファイル機能の有効化スイッチをONに設定。（ＵＯＣ）
　　　　　1.2 StartタイムスタンプファイルをEndタイムスタンプファイルに変更。　　　　　　　　　　　　（Frameworkオプション機能）
　　　　　3.1 フォルダ名 "YYYYMMDDhhmmss" を "YYYYMMDDhhmmss_成功" にリネーム 　　　　　　　　　　　（Frameworkオプション機能）
　　　　　3.1 フォルダ "YYYYMMDDhhmmss_成功" をデータ提供用の外部フォルダに移動 　　　　　　　　　　（Frameworkオプション機能）
　　　　　3.1 外部フォルダ移動が失敗した時に，フォルダ "YYYYMMDDhhmmss_成功" を
　　　　　　　ZIP圧縮してメール添付に設定。 　　　　　　　　　　　　　　　　　　　　　　　　　　　　（ＵＯＣ）
　　　　　3.1 完了目印ファイルを更新　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　（Frameworkオプション機能）
　　　　　3.2 結果メール配信機能は無効化しているため，スキップ　　　　　　　　　　　　　　　　　　　（Frameworkオプション機能）


　◆Framework部品ワークフローフォルダとUOCワークフローフォルダを切り分けています。

　　　[ロボットプロジェクトフォルダ]　　　　　　　　　　　　←UOCワークフローフォルダ
　　　　　　├　MainProcess.xaml
　　　　　　├　：
　　　　　　｜　
　　　　　　└ \勝又自作Attended_Framework_拡張v1_パーツ　　←Framework部品ワークフローフォルダ
　　　　　　　　├　MainFramework.xaml
　　　　　　　　├　：

　◆ロボットプロセスの"main"である "MainFramework.xaml" から以下のUOCワークフローを呼び出します。

　　　　MainFramework.xaml　　　　　　※ロボットプロセスの"main"ワークフロー
　　　　　　├　InitialProcess.xaml 　※UOCワークフロー
　　　　　　├　MainProcess.xaml　　　※UOCワークフロー
　　　　　　└　EndProcess.xaml 　　　※UOCワークフロー

　◆パラメタ系シートの基本的な使い分け。

　　　・Config.xlsx 　　　使用必須。
　　　　　　　　　　　　　　・主に環境に関する設定（各パス設定，シート名設定など）
　　　　　　　　　　　　　　・ロボットの性能に関する設定（タイムアウト設定など），等
　　　　　　　　　　　　　　・その他，UOCでメンバ追加可能。

　　　・Credentials.xlsx　オプション機能。　※OptFuncオプション機能名「Credentials一括取得」
　　　　　　　　　　　　　　・資格情報の一括取得に関する設定

　　　・Parameters.xlsx 　UOCで読み込み。　※"MainProcess.xaml"の処理冒頭で読み込み実行。不要な場合は削除してください。
　　　　　　　　　　　　　　・UOC実装機能の挙動に関する設定やリスト値など。

　◆I/O構成

　　【Framework初期設定のI/O構成】
　　　　[ロボットプロジェクトフォルダ]
　　　　　　　　　　　　　　└ \Data
　　　　　　　　　　　　　　　　├　Config.xlsx
　　　　　　　　　　　　　　　　└ \サンプルRPAワーク　←このフォルダ配下は【運用例】の「ロボットプロセス名Ａ」配下と共通。

　　【運用例】　※"Config.xlsx"設定で可変です。
　　　　[マイドキュメントフォルダ]
　　　　　　└ \RPAワーク
　　　　　　　　├ \ロボットプロセス名Ａ
　　　　　　　　｜　　　　　　　　├　Config.xlsx　　　←※[ロボットプロジェクトフォルダ]から移行。ロボット実行時の引数にフルパスを指定する。
　　　　　　　　｜　　　　　　　　├　Debug.txt
　　　　　　　　｜　　　　　　　　│
　　　　　　　　｜　　　　　　　　├ \PARAM
　　　　　　　　｜　　　　　　　　│　├　Credentials.xlsx
　　　　　　　　｜　　　　　　　　│　├　Parameters.xlsx
　　　　　　　　｜　　　　　　　　│　├　：
　　　　　　　　｜　　　　　　　　│
　　　　　　　　｜　　　　　　　　├ \プロセス実行毎アウトプット
　　　　　　　　｜　　　　　　　　│　├ \yyyyMMdd_HHmmss
　　　　　　　　｜　　　　　　　　│　├ \yyyyMMdd_HHmmss
　　　　　　　　｜　　　　　　　　│　├ \：
　　　　　　　　｜　　　　　　　　│
　　　　　　　　｜　　　　　　　　└ \ExScreenshots
　　　　　　　　｜　　　　　　　　　　├　ExceptionScreenshot_200530.105855.png
　　　　　　　　｜　　　　　　　　　　├　ExceptionScreenshot_200530.111111.png
　　　　　　　　｜　　　　　　　　　　├　：
　　　　　　　　｜
　　　　　　　　├ \ロボットプロセス名Ｂ
　　　　　　　　├ \ロボットプロセス名Ｃ
　　　　　　　　├ \：

　◆ログ運用について（詳細は別項番「■ログ運用について」を参照）



■"Attended_Framework"からの主な拡張機能（標準実装機能）

　◆設定情報一括取得における環境依存解消機能
　　"Config.xlsx"から設定情報を一括取得する際，パス情報文字列(ファイルやフォルダ)が環境に依存する問題を解消します。
　　（Valueの文字列に含まれる"%XXX%"形式のキーワードを環境に応じた実際のフォルダパスに自動変換）

　　　　※ロボット実行時の引数に指定する"Config.xlsx"ファイルパスも，下記例のように環境に依存しない指定が可能です。
　　　　　コマンドラインでの引数指定例：
　　　　　　"C:\Program Files (x86)\UiPath\Studio\UiRobot.exe" execute -p Framework_テスト --input "{'in_ConfigFile' : 'C:\\Users\\userXX\\Documents\\RPAワーク\\Frameworkテスト\\Config.xlsx'}"
　　　　　　または
　　　　　　"C:\Program Files (x86)\UiPath\Studio\UiRobot.exe" execute -p Framework_テスト --input "{'in_ConfigFile' : '%MyDocuments%\\RPAワーク\\Frameworkテスト\\Config.xlsx'}"

　◆ログ出力実装補助
　　・決まり文句（セクション通過メッセージ"XXXを開始します"などの数パターン）の文言をConfig定義できますので，
　　　出力メッセージ文言の統一に悩む必要がありません。
　　　　※セクション名のCONST設定とアクティビティのコピー配置のみでＯＫ。
　　　　　"MainProcess.xaml"内Top注釈記載の説明を参照してください。
　　・"MainProcess.xaml"(UOC用ワークフロー) にログ出力を簡易に実装できるテンプレートを実装済みです。

　◆ログメッセージのUiPathログ・テキストファイル同時出力機能
　　メッセージをUiPath標準ログと，指定したテキストファイルに同時に出力できるアクティビティ「ログ_テキストv1（自作アクティビティパック）」を実装。
　　テキスト出力は出力レベル設定・切替が可能。（詳細は別項番「■ログ運用について」を参照）

　◆Frameworkオプション機能
　　以下の各種オプション機能を有しています。
　　　　※各オプション機能は"Config.xlsx" で機能の有効/無効を設定してください
　　　　※各オプション機能は「OptFunc.xaml」に実装しています。詳細は「OptFunc.xaml」内の注釈記載も参照してください。

　　　＜Credentials一括取得＞
　　　　資格情報の一括取得を実行します。
　　　　取得対象はCredentials.xlsxに一覧設定します。
　　　　資格情報はasset又はWindows資格情報から取得します。
　　　　取得できない場合はWindows資格情報の登録を促します。
　　　　"Credentials.xlsx"にパスワードを指定することも可能です（開発途中での実行向け）。

　　　＜YMDhmsフォルダ作成＞
　　　　プロセス実行毎アウトプット用の"yyyyMMdd_HHmmss"フォルダを生成します。
　　　　　※"yyyyMMdd_HHmmss"にはプロセススタート時間をio_Config("スタートDateTime")に記録したものを反映。
　　　　　※フォルダが元々存在すればアウトプットフォルダを変えるだけ。

　　　＜TimeStampファイル作成＞
　　　　スタート，エンドのタイムスタンプファイル "EndTimeStampyyyyMMdd_HHmmss(StartyyyyMMdd_HHmmss)" を出力します。

　　　＜SMTPメール＞
　　　　終了時実行結果メール自動送信。
　　　　メールのタイトル，内容，宛先，添付を正常終了・異常終了に分けて設定可能。

　　　＜完了目印ファイル更新＞

　　　＜リネームアウトプットフォルダ名＞

　　　＜アウトプットフォルダ移動＞

　◆[勝又自作アクティビティパック]
　　"勝又自作ワークフローパーツ"フォルダ内，"勝又自作アクティビティ使用例_vNNNNNNNN.xaml"にて各アクティビティの使用例を説明しています。

　◆[勝又自作ワークフローパーツ]
　　"勝又自作ワークフローパーツ"フォルダ内，"勝又自作ワークフローパーツ使用例_vNNNNNNNN.xaml"にて各ワークフローパーツの使用例を説明しています。

　◆エラーハンドリング制御ワークフロー雛形を数パターン用意
　　"勝又自作ワークフローパーツ"フォルダ内，"(コピー利用)エラーハンドリング雛形パターン_v20210319.xaml"を参照。



■ログ運用について

　◆以下の基準でのログ運用を想定しています。
　　　アクティビティ「ログ_テキストv1（自作アクティビティパック）」のプロパティ「テキスト出力レベル」設定
　　　　　　0：テキスト出力しない
　　　　　　1：開発レベルの情報出力　※デバッグ向け情報など
　　　　　　2：運用レベルの情報出力
　　　Config.xlsx「ログ_テキストv1_テキスト出力レベルリミット」設定
　　　　　　1：開発モード(開発レベル・運用レベルの両方をテキスト出力)
　　　　　　2：運用モード(運用レベルのみテキスト出力)
　　　　　　3：テキスト出力のオフ　※性能を考慮した場合，ロボット本番運用時はこの設定が望ましい。
　　もしくは，シンプルに以下のようにも利用できます。
　　　アクティビティ「ログ_テキストv1（自作アクティビティパック）」のプロパティ「テキスト出力レベル」設定
　　　　　　2：（固定）
　　　Config.xlsx「ログ_テキストv1_テキスト出力レベルリミット」設定
　　　　　　1：開発時（ログ情報をテキストにも出力）
　　　　　　3：本番時（ログ情報のテキスト出力をオフ）
　　※本番時はログ情報のテキスト出力オフを推奨します（性能を考慮）。

　◆エラー情報出力について
　　・エラー時ススクリーンショット　・・・　Attended_Frameworkの既存機能で出力　※ビジネス例外では出力しない。
　　・例外詳細情報（Exception クラスのプロパティ）
　　　　.Message 　　　　　※例外で定義されているメッセージ
　　　　　　→基本，ログ出力します。
　　　　.Source　　　　　　※エラーが発生したアプリケーションやアクティビティの名前
　　　　　　→基本，ログ出力します。
　　　　.GetType.ToString　※例外の型
　　　　　　→"MainProcess.xaml"の例外発生時のみ，出力します（ビジネス例外では出力しない）。
　　　　.StackTrace　　　　※エラーに至るまでのアクティビティの実行経緯を含む詳細な情報
　　　　　　→"MainProcess.xaml"の例外発生時のみ，出力します（ビジネス例外では出力しない）。

　　※UOCは以下のログ設計指針になるべく準拠するように考慮したい。
　　　https://qiita.com/nanasess/items/350e59b29cceb2f122b3
