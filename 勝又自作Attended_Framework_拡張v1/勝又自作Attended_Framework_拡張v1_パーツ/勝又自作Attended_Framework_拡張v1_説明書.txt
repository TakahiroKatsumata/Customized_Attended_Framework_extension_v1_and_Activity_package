[勝又自作Attended_Framework_拡張v1] (C) 2020 Takahiro Katsumata
　説明：
　このコンポーネントはフリーソフトですので自由にご利用ください。
　著作権は作者が保有しており，作者の個人活動によって作成されたものです。
　このコンポーネントはUiPath社公開"Attended Framework"をカスタマイズし機能拡張したものです。


■前提
・このコンポーネントはUiPath社公開"Attended Framework"をカスタマイズし機能拡張したものです。
・このコンポーネントは [勝又自作アクティビティパック] と共に機能します。
・以下の設定基準での運用を想定したFrameworkです。
　　アクティビティ「ログ_テキストv1（自作アクティビティパック）」のプロパティ「テキスト出力レベル」設定
　　　　　0：テキスト出力しない
　　　　　1：開発レベルの情報出力　※デバッグ向け情報など
　　　　　2：運用レベルの情報出力
　　Config.xlsx「ログ_テキストv1_テキスト出力レベルリミット」設定
　　　　　1：開発モード(開発レベル・運用レベルの両方をテキスト出力)
　　　　　2：運用モード(運用レベルのみテキスト出力)
　　　　　3：テキスト出力のオフ
・相対フォルダ"Data\サンプルRPAワーク"は，ロボットプロセス完成時はプロジェクトフォルダの
　外部（MyDocumentsの配下等）に配置する運用を想定しています。
　（開発中などにプロジェクトフォルダ内でファイルI/Oを完結させる使い方を想定）
　　　%GetCurrentDirectory%\Data\サンプルRPAワーク\　←開発中
　　　%MyDocuments%\RPAワーク\プロセスＡ\　　　　　　←完成時
　　　　　　　　　　　　　├PARAM\
　　　　　　　　　　　　　│　├Credentials.xlsx
　　　　　　　　　　　　　│　└Parameters.xlsx
　　　　　　　　　　　　　├プロセス実行毎アウトプット\
　　　　　　　　　　　　　│　├yyyyMMdd_HHmmss
　　　　　　　　　　　　　│　├yyyyMMdd_HHmmss
　　　　　　　　　　　　　│　└：
　　　　　　　　　　　　　├ExScreenshots\
　　　　　　　　　　　　　│　├ExceptionScreenshot_200530.105855.png
　　　　　　　　　　　　　│　├ExceptionScreenshot_200530.111111.png
　　　　　　　　　　　　　│　└：
　　　　　　　　　　　　　└Debug.txt

■"Attended_Framework"からの主な拡張機能
●＜設定情報一括取得における環境依存解消機能＞
　"Config.xlsx"から設定情報を一括取得する際，パス情報文字列(ファイルやフォルダ)が環境に依存する問題を解消します。
　（Valueの文字列に含まれる"%XXX%"形式のキーワードを環境に応じた実際のフォルダパスに自動変換）
●＜メッセージのUiPathログ・テキストファイル同時出力機能＞
　メッセージをUiPathログと，自分で指定したテキストファイルに同時に出力するアクティビティを実装。
　テキスト出力は設定で開発レベル情報出力(デバッグ向け)，運用レベル情報出力のモード切替が可能。
　　※アクティビティ「ログ_テキストv1（自作アクティビティパック）」の機能を使用。
●＜ログ出力実装補助＞
　・決まり文句（セクション通過メッセージ"XXXを開始します"などの数パターン）はConfig定義できますので，
　　メッセージ文字列に悩む必要がありません。（セクション名のCONST設定とアクティビティのコピー配置のみでＯＫ）
　・"MainProcess.xaml"(UOC用ワークフロー) にログ出力を簡易に実装できるテンプレートを実装済みです。
●＜エラーハンドリングパターンテンプレート＞
　"MainProcess.xaml"(UOC用ワークフロー) に標準的なエラーハンドリングパターンのサンプルテンプレートを用意。
●＜資格情報の一括取得＞
　"MainProcess.xaml"の"初期化"セクションで資格情報の一括取得(取得対象はCredentials.xlsxに設定)を実行します。
　（実行不要の場合はコメントアウトしてください）
　資格情報はasset又はWindows資格情報から取得します。
　取得できない場合はWindows資格情報の登録を促します。
　"Credentials.xlsx"にパスワードを指定することも可能です（開発中向け）。
●＜パラメタ情報の一括取得＞
　"MainProcess.xaml"の"初期化"セクションでパラメタ情報("Parameters.xlsx")の一括取り込みを
　（実行不要の場合はコメントアウトしてください）
●＜"yyyyMMdd_HHmmss"フォルダ生成＞
　プロセス実行毎アウトプット用の"yyyyMMdd_HHmmss"フォルダ生成
　　※"yyyyMMdd_HHmmss"にはプロセススタート時間をio_Config("スタートDateTime")に記録したものを反映。
●＜[勝又自作アクティビティパック]使用例＞
　"勝又自作アクティビティ使用例_vNNNNNNNN.xaml"にて各アクティビティの使用例を説明しています。


■本Frameworkを使用していない既存ロボットの "Main.xaml" に本Frameworkの機能を移植する場合
・移植先にフォルダ"勝又自作Attended_Framework_拡張v1_パーツ"，"Data"をフォルダごとコピーします。
・移植先 "Main.xaml" に変数"Config"を定義します。
・移植先 "Main.xaml" の冒頭にコンテナ「初期化 - 設定を読み込み」をコピーして組み込みます。
・アクティビティ「Process ワークフローを呼び出し」に倣って，後続ワークフロー(.xaml)のInvokeで”Config”を引き継ぎます。
・＜資格情報の一括取得＞を移植する場合は，MainProcess.xaml 内のコンテナ「＜資格情報の一括取得＞」を移植先にコピーし，変数も適切に定義します。



■エラー情報出力について
　　・エラー時ススクリーンショット　・・・　Attended_Frameworkの既存機能で出力　※ビジネス例外では出力しない。
　　・例外詳細情報（Exception クラスのプロパティ）
　　　　.Message 　　　　　※例外で定義されているメッセージ
　　　　　　→基本，ログ出力する，テキスト出力する。
　　　　.Source　　　　　　※エラーが発生したアプリケーションやアクティビティの名前
　　　　　　→基本，ログ出力する，テキスト出力する。
　　　　.GetType.ToString　※例外の型
　　　　　　→基本，ログ出力しない，テキスト出力する（ビジネス例外では出力しない）。
　　　　.StackTrace　　　　※エラーに至るまでのアクティビティの実行経緯を含む詳細な情報
　　　　　　→基本，ログ出力しない，テキスト出力する（ビジネス例外では出力しない。

　　※以下のログ設計指針になるべく準拠するように考慮します。
　　　https://qiita.com/nanasess/items/350e59b29cceb2f122b3



